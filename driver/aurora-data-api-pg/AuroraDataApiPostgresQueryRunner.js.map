{"version":3,"sources":["../../src/driver/aurora-data-api-pg/AuroraDataApiPostgresQueryRunner.ts"],"names":[],"mappings":"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","file":"AuroraDataApiPostgresQueryRunner.js","sourcesContent":["import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\r\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\r\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\r\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\r\nimport {IsolationLevel} from \"../types/IsolationLevel\";\r\nimport {AuroraDataApiPostgresDriver} from \"./AuroraDataApiPostgresDriver\";\r\nimport {PostgresQueryRunner} from \"../postgres/PostgresQueryRunner\";\r\nimport {ReplicationMode} from \"../types/ReplicationMode\";\r\nimport {BroadcasterResult} from \"../../subscriber/BroadcasterResult\";\r\n\r\nclass PostgresQueryRunnerWrapper extends PostgresQueryRunner {\r\n    driver: any;\r\n\r\n    constructor(driver: any, mode: ReplicationMode) {\r\n        super(driver, mode);\r\n    }\r\n}\r\n\r\n/**\r\n * Runs queries on a single postgres database connection.\r\n */\r\nexport class AuroraDataApiPostgresQueryRunner extends PostgresQueryRunnerWrapper implements QueryRunner {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: AuroraDataApiPostgresDriver;\r\n\r\n    protected client: any;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Promise used to obtain a database connection for a first time.\r\n     */\r\n    protected databaseConnectionPromise: Promise<any>;\r\n\r\n    /**\r\n     * Special callback provided by a driver used to release a created connection.\r\n     */\r\n    protected releaseCallback: Function;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: AuroraDataApiPostgresDriver, client: any, mode: ReplicationMode) {\r\n        super(driver, mode);\r\n\r\n        this.client = client\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates/uses database connection from the connection pool to perform further operations.\r\n     * Returns obtained database connection.\r\n     */\r\n    connect(): Promise<any> {\r\n        if (this.databaseConnection)\r\n            return Promise.resolve(this.databaseConnection);\r\n\r\n        if (this.databaseConnectionPromise)\r\n            return this.databaseConnectionPromise;\r\n\r\n        if (this.mode === \"slave\" && this.driver.isReplicated)  {\r\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([ connection, release]: any[]) => {\r\n                this.driver.connectedQueryRunners.push(this);\r\n                this.databaseConnection = connection;\r\n                this.releaseCallback = release;\r\n                return this.databaseConnection;\r\n            });\r\n\r\n        } else { // master\r\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]: any[]) => {\r\n                this.driver.connectedQueryRunners.push(this);\r\n                this.databaseConnection = connection;\r\n                this.releaseCallback = release;\r\n                return this.databaseConnection;\r\n            });\r\n        }\r\n\r\n        return this.databaseConnectionPromise;\r\n    }\r\n\r\n    /**\r\n     * Starts transaction on the current connection.\r\n     */\r\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\r\n        if (this.isTransactionActive)\r\n            throw new TransactionAlreadyStartedError();\r\n\r\n        const beforeBroadcastResult = new BroadcasterResult();\r\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\r\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\r\n\r\n        this.isTransactionActive = true;\r\n      \r\n        await this.client.startTransaction();\r\n\r\n        const afterBroadcastResult = new BroadcasterResult();\r\n        this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\r\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\r\n    }\r\n\r\n    /**\r\n     * Commits transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async commitTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n      \r\n        const beforeBroadcastResult = new BroadcasterResult();\r\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\r\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\r\n\r\n        await this.client.commitTransaction();\r\n\r\n        this.isTransactionActive = false;\r\n\r\n        const afterBroadcastResult = new BroadcasterResult();\r\n        this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\r\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\r\n    }\r\n\r\n    /**\r\n     * Rollbacks transaction.\r\n     * Error will be thrown if transaction was not started.\r\n     */\r\n    async rollbackTransaction(): Promise<void> {\r\n        if (!this.isTransactionActive)\r\n            throw new TransactionNotStartedError();\r\n\r\n        const beforeBroadcastResult = new BroadcasterResult();\r\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\r\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\r\n\r\n        await this.client.rollbackTransaction();\r\n\r\n        const afterBroadcastResult = new BroadcasterResult();\r\n        this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\r\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    async query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const result = await this.client.query(query, parameters);\r\n\r\n        if (result.records) {\r\n            return result.records;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}