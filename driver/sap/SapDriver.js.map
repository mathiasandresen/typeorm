{"version":3,"sources":["../../src/driver/sap/SapDriver.ts"],"names":[],"mappings":"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","file":"SapDriver.js","sourcesContent":["import {ColumnType, Connection, EntityMetadata, ObjectLiteral, TableColumn} from \"../..\";\r\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\r\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\r\nimport {PlatformTools} from \"../../platform/PlatformTools\";\r\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\r\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\r\nimport {DateUtils} from \"../../util/DateUtils\";\r\nimport {OrmUtils} from \"../../util/OrmUtils\";\r\nimport {Driver} from \"../Driver\";\r\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\r\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\r\nimport {SapConnectionOptions} from \"./SapConnectionOptions\";\r\nimport {SapQueryRunner} from \"./SapQueryRunner\";\r\nimport {ReplicationMode} from \"../types/ReplicationMode\";\r\n\r\n/**\r\n * Organizes communication with SAP Hana DBMS.\r\n *\r\n * todo: looks like there is no built in support for connection pooling, we need to figure out something\r\n */\r\nexport class SapDriver implements Driver {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection used by driver.\r\n     */\r\n    connection: Connection;\r\n\r\n    /**\r\n     * Hana Pool instance.\r\n     */\r\n    client: any;\r\n\r\n    /**\r\n     * Pool for master database.\r\n     */\r\n    master: any;\r\n\r\n    /**\r\n     * Pool for slave databases.\r\n     * Used in replication.\r\n     */\r\n    slaves: any[] = [];\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Connection options.\r\n     */\r\n    options: SapConnectionOptions;\r\n\r\n    /**\r\n     * Master database used to perform all write queries.\r\n     */\r\n    database?: string;\r\n\r\n    /**\r\n     * Indicates if replication is enabled.\r\n     */\r\n    isReplicated: boolean = false;\r\n\r\n    /**\r\n     * Indicates if tree tables are supported by this driver.\r\n     */\r\n    treeSupport = true;\r\n\r\n    /**\r\n     * Gets list of supported column data types by a driver.\r\n     *\r\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a1569875191014b507cf392724b7eb.html\r\n     */\r\n    supportedDataTypes: ColumnType[] = [\r\n        \"tinyint\",\r\n        \"smallint\",\r\n        \"int\",\r\n        \"integer\",\r\n        \"bigint\",\r\n        \"smalldecimal\",\r\n        \"decimal\",\r\n        \"dec\",\r\n        \"real\",\r\n        \"double\",\r\n        \"float\",\r\n        \"date\",\r\n        \"time\",\r\n        \"seconddate\",\r\n        \"timestamp\",\r\n        \"boolean\",\r\n        \"char\",\r\n        \"nchar\",\r\n        \"varchar\",\r\n        \"nvarchar\",\r\n        \"text\",\r\n        \"alphanum\",\r\n        \"shorttext\",\r\n        \"array\",\r\n        \"varbinary\",\r\n        \"blob\",\r\n        \"clob\",\r\n        \"nclob\",\r\n        \"st_geometry\",\r\n        \"st_point\",\r\n    ];\r\n\r\n    /**\r\n     * Gets list of spatial column data types.\r\n     */\r\n    spatialTypes: ColumnType[] = [\r\n        \"st_geometry\",\r\n        \"st_point\",\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that support length by a driver.\r\n     */\r\n    withLengthColumnTypes: ColumnType[] = [\r\n        \"varchar\",\r\n        \"nvarchar\",\r\n        \"alphanum\",\r\n        \"shorttext\",\r\n        \"varbinary\"\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that support precision by a driver.\r\n     */\r\n    withPrecisionColumnTypes: ColumnType[] = [\r\n        \"decimal\",\r\n    ];\r\n\r\n    /**\r\n     * Gets list of column data types that support scale by a driver.\r\n     */\r\n    withScaleColumnTypes: ColumnType[] = [\r\n        \"decimal\",\r\n    ];\r\n\r\n    /**\r\n     * Orm has special columns and we need to know what database column types should be for those types.\r\n     * Column types are driver dependant.\r\n     */\r\n    mappedDataTypes: MappedColumnTypes = {\r\n        createDate: \"timestamp\",\r\n        createDateDefault: \"CURRENT_TIMESTAMP\",\r\n        updateDate: \"timestamp\",\r\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\r\n        deleteDate: \"timestamp\",\r\n        deleteDateNullable: true,\r\n        version: \"integer\",\r\n        treeLevel: \"integer\",\r\n        migrationId: \"integer\",\r\n        migrationName: \"nvarchar\",\r\n        migrationTimestamp: \"bigint\",\r\n        cacheId: \"integer\",\r\n        cacheIdentifier: \"nvarchar\",\r\n        cacheTime: \"bigint\",\r\n        cacheDuration: \"integer\",\r\n        cacheQuery: \"nvarchar(5000)\" as any,\r\n        cacheResult: \"text\",\r\n        metadataType: \"nvarchar\",\r\n        metadataDatabase: \"nvarchar\",\r\n        metadataSchema: \"nvarchar\",\r\n        metadataTable: \"nvarchar\",\r\n        metadataName: \"nvarchar\",\r\n        metadataValue: \"nvarchar(5000)\" as any,\r\n    };\r\n\r\n    /**\r\n     * Default values of length, precision and scale depends on column data type.\r\n     * Used in the cases when length/precision/scale is not specified by user.\r\n     */\r\n    dataTypeDefaults: DataTypeDefaults = {\r\n        \"char\": { length: 1 },\r\n        \"nchar\": { length: 1 },\r\n        \"varchar\": { length: 255 },\r\n        \"nvarchar\": { length: 255 },\r\n        \"shorttext\": { length: 255 },\r\n        \"varbinary\": { length: 255 },\r\n        \"decimal\": { precision: 18, scale: 0 },\r\n    };\r\n\r\n    /**\r\n     * Max length allowed by SAP HANA for aliases (identifiers).\r\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a760537519101497e3cfe07b348f3c.html\r\n     */\r\n    maxAliasLength = 128;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(connection: Connection) {\r\n        this.connection = connection;\r\n        this.options = connection.options as SapConnectionOptions;\r\n        this.loadDependencies();\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Implemented Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Performs connection to the database.\r\n     * Based on pooling options, it can either create connection immediately,\r\n     * either create a pool and create connection when needed.\r\n     */\r\n    async connect(): Promise<void> {\r\n        // HANA connection info\r\n        const dbParams = {\r\n            hostName: this.options.host,\r\n            port: this.options.port,\r\n            userName: this.options.username,\r\n            password: this.options.password,\r\n            ...this.options.extra\r\n        };\r\n\r\n        if (this.options.database) dbParams.databaseName = this.options.database;\r\n        if (this.options.encrypt) dbParams.encrypt = this.options.encrypt;\r\n        if (this.options.sslValidateCertificate) dbParams.validateCertificate = this.options.sslValidateCertificate;\r\n        if (this.options.key) dbParams.key = this.options.key;\r\n        if (this.options.cert) dbParams.cert = this.options.cert;\r\n        if (this.options.ca) dbParams.ca = this.options.ca;\r\n\r\n        // pool options\r\n        const options: any = {\r\n            min: this.options.pool && this.options.pool.min ? this.options.pool.min : 1,\r\n            max: this.options.pool && this.options.pool.max ? this.options.pool.max : 10,\r\n        };\r\n\r\n        if (this.options.pool && this.options.pool.checkInterval) options.checkInterval = this.options.pool.checkInterval;\r\n        if (this.options.pool && this.options.pool.maxWaitingRequests) options.maxWaitingRequests = this.options.pool.maxWaitingRequests;\r\n        if (this.options.pool && this.options.pool.requestTimeout) options.requestTimeout = this.options.pool.requestTimeout;\r\n        if (this.options.pool && this.options.pool.idleTimeout) options.idleTimeout = this.options.pool.idleTimeout;\r\n\r\n        const { logger } = this.connection;\r\n\r\n        const poolErrorHandler = options.poolErrorHandler || ((error: any) => logger.log(\"warn\", `SAP Hana pool raised an error. ${error}`));\r\n        this.client.eventEmitter.on(\"poolError\", poolErrorHandler);\r\n\r\n        // create the pool\r\n        this.master = this.client.createPool(dbParams, options);\r\n\r\n        this.database = this.options.database;\r\n    }\r\n\r\n    /**\r\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\r\n     */\r\n    afterConnect(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * Closes connection with the database.\r\n     */\r\n    async disconnect(): Promise<void> {\r\n        const promise = this.master.clear();\r\n        this.master = undefined;\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Creates a schema builder used to build and sync a schema.\r\n     */\r\n    createSchemaBuilder() {\r\n        return new RdbmsSchemaBuilder(this.connection);\r\n    }\r\n\r\n    /**\r\n     * Creates a query runner used to execute database queries.\r\n     */\r\n    createQueryRunner(mode: ReplicationMode) {\r\n        return new SapQueryRunner(this, mode);\r\n    }\r\n\r\n    /**\r\n     * Replaces parameters in the given sql with special escaping character\r\n     * and an array of parameter names to be passed to a query.\r\n     */\r\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\r\n        const builtParameters: any[] = Object.keys(nativeParameters).map(key => {\r\n\r\n            if (nativeParameters[key] instanceof Date)\r\n                return DateUtils.mixedDateToDatetimeString(nativeParameters[key], true);\r\n\r\n            return nativeParameters[key];\r\n        });\r\n\r\n        if (!parameters || !Object.keys(parameters).length)\r\n            return [sql, builtParameters];\r\n\r\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\r\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\r\n            let value: any;\r\n            let isArray = false;\r\n            if (key.substr(0, 4) === \":...\") {\r\n                isArray = true;\r\n                value = parameters[key.substr(4)];\r\n            } else {\r\n                value = parameters[key.substr(1)];\r\n            }\r\n\r\n            if (isArray) {\r\n                return value.map((v: any) => {\r\n                    builtParameters.push(v);\r\n                    return \"?\";\r\n                    // return \"$\" + builtParameters.length;\r\n                }).join(\", \");\r\n\r\n            } else if (value instanceof Function) {\r\n                return value();\r\n\r\n            } else if (value instanceof Date) {\r\n                return DateUtils.mixedDateToDatetimeString(value, true);\r\n\r\n            } else {\r\n                builtParameters.push(value);\r\n                return \"?\";\r\n                // return \"$\" + builtParameters.length;\r\n            }\r\n        }); // todo: make replace only in value statements, otherwise problems\r\n        return [sql, builtParameters];\r\n    }\r\n\r\n    /**\r\n     * Escapes a column name.\r\n     */\r\n    escape(columnName: string): string {\r\n        return `\"${columnName}\"`;\r\n    }\r\n\r\n    /**\r\n     * Build full table name with schema name and table name.\r\n     * E.g. \"mySchema\".\"myTable\"\r\n     */\r\n    buildTableName(tableName: string, schema?: string): string {\r\n        return schema ? `${schema}.${tableName}` : tableName;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\r\n     */\r\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\r\n\r\n        if (value === null || value === undefined)\r\n            return value;\r\n\r\n        if (columnMetadata.type === Boolean) {\r\n            return value === true ? 1 : 0;\r\n\r\n        } else if (columnMetadata.type === \"date\") {\r\n            return DateUtils.mixedDateToDateString(value);\r\n\r\n        } else if (columnMetadata.type === \"time\") {\r\n            return DateUtils.mixedDateToTimeString(value);\r\n\r\n        } else if (columnMetadata.type === \"timestamp\"\r\n            || columnMetadata.type === Date) {\r\n            return DateUtils.mixedDateToDatetimeString(value, true);\r\n\r\n        } else if (columnMetadata.type === \"seconddate\") {\r\n            return DateUtils.mixedDateToDatetimeString(value, false);\r\n\r\n        } else if (columnMetadata.type === \"simple-array\") {\r\n            return DateUtils.simpleArrayToString(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            return DateUtils.simpleJsonToString(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-enum\") {\r\n            return DateUtils.simpleEnumToString(value);\r\n\r\n        } else if (columnMetadata.isArray) {\r\n            return () => `ARRAY(${value.map((it: any) => `'${it}'`)})`;\r\n        }\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\r\n     */\r\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\r\n        if (value === null || value === undefined)\r\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\r\n\r\n        if (columnMetadata.type === Boolean) {\r\n            value = value ? true : false;\r\n\r\n        } else if (columnMetadata.type === \"timestamp\"\r\n            || columnMetadata.type === \"seconddate\"\r\n            || columnMetadata.type === Date) {\r\n            value = DateUtils.normalizeHydratedDate(value);\r\n\r\n        } else if (columnMetadata.type === \"date\") {\r\n            value = DateUtils.mixedDateToDateString(value);\r\n\r\n        } else if (columnMetadata.type === \"time\") {\r\n            value = DateUtils.mixedTimeToString(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-array\") {\r\n            value = DateUtils.stringToSimpleArray(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-json\") {\r\n            value = DateUtils.stringToSimpleJson(value);\r\n\r\n        } else if (columnMetadata.type === \"simple-enum\") {\r\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata);\r\n        }\r\n\r\n        if (columnMetadata.transformer)\r\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\r\n\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Creates a database type from a given column metadata.\r\n     */\r\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number }): string {\r\n        if (column.type === Number || column.type === \"int\") {\r\n            return \"integer\";\r\n\r\n        } else if (column.type === String) {\r\n            return \"nvarchar\";\r\n\r\n        } else if (column.type === Date) {\r\n            return \"timestamp\";\r\n\r\n        } else if (column.type === Boolean) {\r\n            return \"boolean\";\r\n\r\n        } else if ((column.type as any) === Buffer) {\r\n            return \"blob\";\r\n\r\n        } else if (column.type === \"uuid\") {\r\n            return \"nvarchar\";\r\n\r\n        } else if (column.type === \"simple-array\" || column.type === \"simple-json\") {\r\n            return \"text\";\r\n\r\n        } else if (column.type === \"simple-enum\") {\r\n            return \"nvarchar\";\r\n\r\n        } else {\r\n            return column.type as string || \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"default\" value of the column.\r\n     */\r\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\r\n        const defaultValue = columnMetadata.default;\r\n\r\n        if (typeof defaultValue === \"number\") {\r\n            return \"\" + defaultValue;\r\n\r\n        } else if (typeof defaultValue === \"boolean\") {\r\n            return defaultValue === true ? \"true\" : \"false\";\r\n\r\n        } else if (typeof defaultValue === \"function\") {\r\n            return defaultValue();\r\n\r\n        } else if (typeof defaultValue === \"string\") {\r\n            return `'${defaultValue}'`;\r\n\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Normalizes \"isUnique\" value of the column.\r\n     */\r\n    normalizeIsUnique(column: ColumnMetadata): boolean {\r\n        return column.entityMetadata.indices.some(idx => idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column);\r\n    }\r\n\r\n    /**\r\n     * Returns default column lengths, which is required on column creation.\r\n     */\r\n    getColumnLength(column: ColumnMetadata|TableColumn): string {\r\n        if (column.length)\r\n            return column.length.toString();\r\n\r\n        if (column.generationStrategy === \"uuid\")\r\n            return \"36\";\r\n\r\n        switch (column.type) {\r\n            case \"varchar\":\r\n            case \"nvarchar\":\r\n            case \"shorttext\":\r\n            case String:\r\n                return \"255\";\r\n            case \"alphanum\":\r\n                return \"127\";\r\n            case \"varbinary\":\r\n                return \"255\";\r\n        }\r\n\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * Creates column type definition including length, precision and scale\r\n     */\r\n    createFullType(column: TableColumn): string {\r\n        let type = column.type;\r\n\r\n        // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.\r\n        if (this.getColumnLength(column)) {\r\n            type += `(${this.getColumnLength(column)})`;\r\n\r\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\r\n            type += `(${column.precision},${column.scale})`;\r\n\r\n        } else if (column.precision !== null && column.precision !== undefined) {\r\n            type += `(${column.precision})`;\r\n        }\r\n\r\n        if (column.isArray)\r\n            type += \" array\";\r\n\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a master server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns default connection's database connection.\r\n     */\r\n    obtainMasterConnection(): Promise<any> {\r\n        return this.master.getConnection();\r\n    }\r\n\r\n    /**\r\n     * Obtains a new database connection to a slave server.\r\n     * Used for replication.\r\n     * If replication is not setup then returns master (default) connection's database connection.\r\n     */\r\n    obtainSlaveConnection(): Promise<any> {\r\n        return this.obtainMasterConnection();\r\n    }\r\n\r\n    /**\r\n     * Creates generated map of values generated or returned by database after INSERT query.\r\n     */\r\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\r\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\r\n            let value: any;\r\n            if (generatedColumn.generationStrategy === \"increment\" && insertResult) {\r\n                value = insertResult;\r\n                // } else if (generatedColumn.generationStrategy === \"uuid\") {\r\n                //     console.log(\"getting db value:\", generatedColumn.databaseName);\r\n                //     value = generatedColumn.getEntityValue(uuidMap);\r\n            }\r\n\r\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\r\n        }, {} as ObjectLiteral);\r\n\r\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\r\n    }\r\n\r\n    /**\r\n     * Differentiate columns of this table and columns from the given column metadatas columns\r\n     * and returns only changed.\r\n     */\r\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\r\n        return columnMetadatas.filter(columnMetadata => {\r\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\r\n            if (!tableColumn)\r\n                return false; // we don't need new columns, we only need exist and changed\r\n\r\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\r\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\r\n            // console.log(\"type:\", tableColumn.type, _this.normalizeType(columnMetadata));\r\n            // console.log(\"length:\", tableColumn.length, _this.getColumnLength(columnMetadata));\r\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\r\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\r\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\r\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\r\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\r\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\r\n            // console.log(\"isUnique:\", tableColumn.isUnique, _this.normalizeIsUnique(columnMetadata));\r\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\r\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\r\n            // console.log(\"==========================================\");\r\n\r\n            const normalizeDefault = this.normalizeDefault(columnMetadata);\r\n            const hanaNullComapatibleDefault = normalizeDefault == null ? undefined : normalizeDefault;\r\n\r\n            return tableColumn.name !== columnMetadata.databaseName\r\n                || tableColumn.type !== this.normalizeType(columnMetadata)\r\n                || columnMetadata.length && tableColumn.length !== this.getColumnLength(columnMetadata)\r\n                || tableColumn.precision !== columnMetadata.precision\r\n                || tableColumn.scale !== columnMetadata.scale\r\n                // || tableColumn.comment !== columnMetadata.comment || // todo\r\n                || (!tableColumn.isGenerated && (hanaNullComapatibleDefault !== tableColumn.default)) // we included check for generated here, because generated columns already can have default values\r\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\r\n                || tableColumn.isNullable !== columnMetadata.isNullable\r\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\r\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports RETURNING / OUTPUT statement.\r\n     */\r\n    isReturningSqlSupported(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports uuid values generation on its own.\r\n     */\r\n    isUUIDGenerationSupported(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Returns true if driver supports fulltext indices.\r\n     */\r\n    isFullTextColumnTypeSupported(): boolean {\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates an escaped parameter.\r\n     */\r\n    createParameter(parameterName: string, index: number): string {\r\n        return \"?\";\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Protected Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\r\n     */\r\n    protected loadDependencies(): void {\r\n        try {\r\n            this.client = PlatformTools.load(\"hdb-pool\");\r\n\r\n        } catch (e) { // todo: better error for browser env\r\n            throw new DriverPackageNotInstalledError(\"SAP Hana\", \"hdb-pool\");\r\n        }\r\n\r\n        try {\r\n            PlatformTools.load(\"@sap/hana-client\");\r\n\r\n        } catch (e) { // todo: better error for browser env\r\n            throw new DriverPackageNotInstalledError(\"SAP Hana\", \"@sap/hana-client\");\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"../.."}