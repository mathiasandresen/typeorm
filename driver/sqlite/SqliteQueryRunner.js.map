{"version":3,"sources":["../../src/driver/sqlite/SqliteQueryRunner.ts"],"names":[],"mappings":"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","file":"SqliteQueryRunner.js","sourcesContent":["import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\r\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\r\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\r\nimport {SqliteConnectionOptions} from \"./SqliteConnectionOptions\";\r\nimport {SqliteDriver} from \"./SqliteDriver\";\r\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\r\nimport { ConnectionIsNotSetError } from '../../error/ConnectionIsNotSetError';\r\n\r\n/**\r\n * Runs queries on a single sqlite database connection.\r\n *\r\n * Does not support compose primary keys with autoincrement field.\r\n * todo: need to throw exception for this case.\r\n */\r\nexport class SqliteQueryRunner extends AbstractSqliteQueryRunner {\r\n\r\n    /**\r\n     * Database driver used by connection.\r\n     */\r\n    driver: SqliteDriver;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(driver: SqliteDriver) {\r\n        super();\r\n        this.driver = driver;\r\n        this.connection = driver.connection;\r\n        this.broadcaster = new Broadcaster(this);\r\n    }\r\n\r\n    /**\r\n     * Executes a given SQL query.\r\n     */\r\n    query(query: string, parameters?: any[]): Promise<any> {\r\n        if (this.isReleased)\r\n            throw new QueryRunnerAlreadyReleasedError();\r\n\r\n        const connection = this.driver.connection;\r\n        const options = connection.options as SqliteConnectionOptions;\r\n\r\n        if (!connection.isConnected){\r\n            throw new ConnectionIsNotSetError('sqlite')\r\n        }\r\n\r\n        return new Promise<any[]>(async (ok, fail) => {\r\n\r\n            const databaseConnection = await this.connect();\r\n            this.driver.connection.logger.logQuery(query, parameters, this);\r\n            const queryStartTime = +new Date();\r\n            const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\r\n\r\n            const execute = async () => {\r\n                if (isInsertQuery) {\r\n                    databaseConnection.run(query, parameters, handler);\r\n                } else {\r\n                    databaseConnection.all(query, parameters, handler);\r\n                }\r\n            };\r\n\r\n            const handler = function (err: any, result: any) {\r\n                if (err && err.toString().indexOf(\"SQLITE_BUSY:\") !== -1) {\r\n                    if (typeof options.busyErrorRetry === \"number\" && options.busyErrorRetry > 0) {\r\n                        setTimeout(execute, options.busyErrorRetry);\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // log slow queries if maxQueryExecution time is set\r\n                const maxQueryExecutionTime = connection.options.maxQueryExecutionTime;\r\n                const queryEndTime = +new Date();\r\n                const queryExecutionTime = queryEndTime - queryStartTime;\r\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\r\n                    connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\r\n\r\n                if (err) {\r\n                    connection.logger.logQueryError(err, query, parameters, this);\r\n                    fail(new QueryFailedError(query, parameters, err));\r\n                } else {\r\n                    ok(isInsertQuery ? this[\"lastID\"] : result);\r\n                }\r\n            };\r\n\r\n            await execute();\r\n        });\r\n    }\r\n}\r\n"],"sourceRoot":"../.."}