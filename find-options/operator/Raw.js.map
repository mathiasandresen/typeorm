{"version":3,"sources":["../../src/find-options/operator/Raw.ts"],"names":[],"mappings":";;AAAA,gDAA6C;AAsB7C,SAAgB,GAAG,CACf,mBAA+D,EAC/D,sBAAsC;IAEtC,IAAI,OAAO,mBAAmB,KAAK,UAAU,EAAE;QAC3C,OAAO,IAAI,2BAAY,CAAC,KAAK,EAAE,mBAAmB,EAAE,KAAK,CAAC,CAAC;KAC9D;IAED,OAAO,IAAI,2BAAY,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,mBAAmB,EAAE,sBAAsB,CAAC,CAAC;AAChG,CAAC;AATD,kBASC","file":"Raw.js","sourcesContent":["import {FindOperator} from \"../FindOperator\";\r\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\r\n\r\n/**\r\n * Find Options Operator.\r\n * Example: { someField: Raw(\"12\") }\r\n */\r\nexport function Raw<T>(value: string): FindOperator<any>;\r\n\r\n/**\r\n * Find Options Operator.\r\n * Example: { someField: Raw((columnAlias) => `${columnAlias} = 5`) }\r\n */\r\nexport function Raw<T>(sqlGenerator: ((columnAlias: string) => string)): FindOperator<any>;\r\n\r\n/**\r\n * Find Options Operator.\r\n * For escaping parameters use next syntax:\r\n * Example: { someField: Raw((columnAlias) => `${columnAlias} = :value`, { value: 5 }) }\r\n */\r\nexport function Raw<T>(sqlGenerator: ((columnAlias: string) => string), parameters: ObjectLiteral): FindOperator<any>;\r\n\r\nexport function Raw<T>(\r\n    valueOrSqlGenerator: string | ((columnAlias: string) => string),\r\n    sqlGeneratorParameters?: ObjectLiteral,\r\n): FindOperator<any> {\r\n    if (typeof valueOrSqlGenerator !== 'function') {\r\n        return new FindOperator(\"raw\", valueOrSqlGenerator, false);\r\n    }\r\n\r\n    return new FindOperator(\"raw\", [], true, true, valueOrSqlGenerator, sqlGeneratorParameters);\r\n}\r\n"],"sourceRoot":"../.."}