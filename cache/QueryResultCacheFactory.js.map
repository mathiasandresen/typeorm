{"version":3,"sources":["../../src/cache/QueryResultCacheFactory.ts"],"names":[],"mappings":";;AAAA,iEAA8D;AAC9D,2DAAwD;AAIxD;;GAEG;AACH;IAEI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,iCAAsB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;IAC5C,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;OAEG;IACH,wCAAM,GAAN;QACI,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK;YAC9B,MAAM,IAAI,KAAK,CAAC,uKAAuK,CAAC,CAAC;QAE7L,IAAM,KAAK,GAAQ,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC;QAEjD,IAAI,KAAK,CAAC,QAAQ,IAAI,OAAO,KAAK,CAAC,QAAQ,KAAK,UAAU,EAAE;YACxD,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC1C;QAED,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,IAAI,KAAK,CAAC,IAAI,KAAK,iBAAiB,EAAE;YACxF,OAAO,IAAI,6CAAqB,CAAC,IAAI,CAAC,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;SACjE;aAAM;YACH,OAAO,IAAI,uCAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAClD;IACL,CAAC;IAEL,8BAAC;AAAD,CAjCA,AAiCC,IAAA;AAjCY,0DAAuB","file":"QueryResultCacheFactory.js","sourcesContent":["import {RedisQueryResultCache} from \"./RedisQueryResultCache\";\r\nimport {DbQueryResultCache} from \"./DbQueryResultCache\";\r\nimport {QueryResultCache} from \"./QueryResultCache\";\r\nimport {Connection} from \"../connection/Connection\";\r\n\r\n/**\r\n * Caches query result into Redis database.\r\n */\r\nexport class QueryResultCacheFactory {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(protected connection: Connection) {\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Public Methods\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Creates a new query result cache based on connection options.\r\n     */\r\n    create(): QueryResultCache {\r\n        if (!this.connection.options.cache)\r\n            throw new Error(`To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`);\r\n\r\n        const cache: any = this.connection.options.cache;\r\n\r\n        if (cache.provider && typeof cache.provider === \"function\") {\r\n            return cache.provider(this.connection);\r\n        }\r\n\r\n        if (cache.type === \"redis\" || cache.type === \"ioredis\" || cache.type === \"ioredis/cluster\") {\r\n            return new RedisQueryResultCache(this.connection, cache.type);\r\n        } else {\r\n            return new DbQueryResultCache(this.connection);\r\n        }\r\n    }\r\n\r\n}\r\n"],"sourceRoot":".."}