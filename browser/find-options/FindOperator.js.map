{"version":3,"sources":["../browser/src/find-options/FindOperator.ts"],"names":[],"mappings":"AAKA;;GAEG;AACH;IAoCI,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,sBACI,IAAsB,EACtB,KAAwB,EACxB,YAA4B,EAC5B,kBAAmC,EACnC,MAAyB,EACzB,uBAAuC;QAHvC,6BAAA,EAAA,mBAA4B;QAC5B,mCAAA,EAAA,0BAAmC;QAInC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;QAClC,IAAI,CAAC,mBAAmB,GAAG,kBAAkB,CAAC;QAC9C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,wBAAwB,GAAG,uBAAuB,CAAC;IAC5D,CAAC;IAUD,sBAAI,sCAAY;QARhB,4EAA4E;QAC5E,YAAY;QACZ,4EAA4E;QAE5E;;;WAGG;aACH;YACI,IAAI,IAAI,CAAC,MAAM,YAAY,YAAY;gBACnC,OAAO,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC;YAEpC,OAAO,IAAI,CAAC,aAAa,CAAC;QAC9B,CAAC;;;OAAA;IAMD,sBAAI,4CAAkB;QAJtB;;;WAGG;aACH;YACI,IAAI,IAAI,CAAC,MAAM,YAAY,YAAY;gBACnC,OAAO,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC;YAE1C,OAAO,IAAI,CAAC,mBAAmB,CAAC;QACpC,CAAC;;;OAAA;IAKD,sBAAI,8BAAI;QAHR;;WAEG;aACH;YACI,OAAO,IAAI,CAAC,KAAK,CAAC;QACtB,CAAC;;;OAAA;IAKD,sBAAI,+BAAK;QAHT;;WAEG;aACH;YACI,IAAI,IAAI,CAAC,MAAM,YAAY,YAAY;gBACnC,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YAE7B,OAAO,IAAI,CAAC,MAAM,CAAC;QACvB,CAAC;;;OAAA;IAKD,sBAAI,iDAAuB;QAH3B;;WAEG;aACH;YACI,IAAI,IAAI,CAAC,MAAM,YAAY,YAAY;gBACnC,OAAO,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC;YAE/C,OAAO,IAAI,CAAC,wBAAwB,CAAC;QACzC,CAAC;;;OAAA;IAMD,sBAAI,+BAAK;QAHT;;WAEG;aACH;YACI,IAAI,IAAI,CAAC,MAAM,YAAY,YAAY;gBACnC,OAAO,IAAI,CAAC,MAAM,CAAC;YAEvB,OAAO,SAAS,CAAC;QACrB,CAAC;;;OAAA;IAKD,sBAAI,gCAAM;QAHV;;WAEG;aACH;YACI,IAAI,IAAI,CAAC,MAAM,YAAY,YAAY;gBACnC,OAAO,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YAE9B,OAAO,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;;;OAAA;IACL,mBAAC;AAAD,CAjIA,AAiIC,IAAA","file":"FindOperator.js","sourcesContent":["import {ObjectLiteral} from \"../common/ObjectLiteral\";\r\nimport {FindOperatorType} from \"./FindOperatorType\";\r\n\r\ntype SqlGeneratorType = (aliasPath: string) => string;\r\n\r\n/**\r\n * Find Operator used in Find Conditions.\r\n */\r\nexport class FindOperator<T> {\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Private Properties\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Operator type.\r\n     */\r\n    private _type: FindOperatorType;\r\n\r\n    /**\r\n     * Parameter value.\r\n     */\r\n    private _value: T|FindOperator<T>;\r\n\r\n    /**\r\n     * ObjectLiteral parameters.\r\n     */\r\n    private _objectLiteralParameters: ObjectLiteral|undefined;\r\n\r\n    /**\r\n     * Indicates if parameter is used or not for this operator.\r\n     */\r\n    private _useParameter: boolean;\r\n\r\n    /**\r\n     * Indicates if multiple parameters must be used for this operator.\r\n     */\r\n    private _multipleParameters: boolean;\r\n\r\n    /**\r\n     * SQL generator\r\n     */\r\n    private _getSql: SqlGeneratorType|undefined;\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Constructor\r\n    // -------------------------------------------------------------------------\r\n\r\n    constructor(\r\n        type: FindOperatorType,\r\n        value: T|FindOperator<T>,\r\n        useParameter: boolean = true,\r\n        multipleParameters: boolean = false,\r\n        getSql?: SqlGeneratorType,\r\n        objectLiteralParameters?: ObjectLiteral,\r\n    ) {\r\n        this._type = type;\r\n        this._value = value;\r\n        this._useParameter = useParameter;\r\n        this._multipleParameters = multipleParameters;\r\n        this._getSql = getSql; \r\n        this._objectLiteralParameters = objectLiteralParameters;\r\n    }\r\n\r\n    // -------------------------------------------------------------------------\r\n    // Accessors\r\n    // -------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Indicates if parameter is used or not for this operator.\r\n     * Extracts final value if value is another find operator.\r\n     */\r\n    get useParameter(): boolean {\r\n        if (this._value instanceof FindOperator)\r\n            return this._value.useParameter;\r\n\r\n        return this._useParameter;\r\n    }\r\n\r\n    /**\r\n     * Indicates if multiple parameters must be used for this operator.\r\n     * Extracts final value if value is another find operator.\r\n     */\r\n    get multipleParameters(): boolean {\r\n        if (this._value instanceof FindOperator)\r\n            return this._value.multipleParameters;\r\n\r\n        return this._multipleParameters;\r\n    }\r\n\r\n    /**\r\n     * Gets the Type of this FindOperator\r\n     */\r\n    get type(): string {\r\n        return this._type;\r\n    }\r\n\r\n    /**\r\n     * Gets the final value needs to be used as parameter value.\r\n     */\r\n    get value(): T {\r\n        if (this._value instanceof FindOperator)\r\n            return this._value.value;\r\n\r\n        return this._value;\r\n    }\r\n\r\n    /**\r\n     * Gets ObjectLiteral parameters.\r\n     */\r\n    get objectLiteralParameters(): ObjectLiteral|undefined {\r\n        if (this._value instanceof FindOperator)\r\n            return this._value.objectLiteralParameters;\r\n\r\n        return this._objectLiteralParameters;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the child FindOperator if it exists\r\n     */\r\n    get child(): FindOperator<T>|undefined {\r\n        if (this._value instanceof FindOperator)\r\n            return this._value;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /**\r\n     * Gets the SQL generator\r\n     */\r\n    get getSql(): SqlGeneratorType|undefined {\r\n        if (this._value instanceof FindOperator)\r\n            return this._value.getSql;\r\n\r\n        return this._getSql;\r\n    }\r\n}\r\n"],"sourceRoot":".."}