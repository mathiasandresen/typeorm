{"version":3,"sources":["../browser/src/driver/better-sqlite3/BetterSqlite3ConnectionOptions.ts"],"names":[],"mappings":"","file":"BetterSqlite3ConnectionOptions.js","sourcesContent":["import {BaseConnectionOptions} from \"../../connection/BaseConnectionOptions\";\r\n\r\n/**\r\n * Sqlite-specific connection options.\r\n */\r\nexport interface BetterSqlite3ConnectionOptions extends BaseConnectionOptions {\r\n\r\n    /**\r\n     * Database type.\r\n     */\r\n    readonly type: \"better-sqlite3\";\r\n\r\n    /**\r\n     * Storage type or path to the storage.\r\n     */\r\n    readonly database: string;\r\n\r\n    /**\r\n     * Encryption key for for SQLCipher.\r\n     */\r\n    readonly key?: string;\r\n\r\n    /**\r\n     * Cache size of sqlite statement to speed up queries.\r\n     * Default: 100.\r\n     */\r\n    readonly statementCacheSize?: number;\r\n\r\n    /**\r\n     * Function to run before a database is used in typeorm.\r\n     * You can set pragmas, register plugins or register\r\n     * functions or aggregates in this function. \r\n     */\r\n    readonly prepareDatabase?: (db: any) => void | Promise<void>;\r\n\r\n    /**\r\n     * Open the database connection in readonly mode.\r\n     * Default: false.\r\n     */\r\n    readonly readonly?: boolean;\r\n\r\n    /**\r\n     * If the database does not exist, an Error will be thrown instead of creating a new file.\r\n     * This option does not affect in-memory or readonly database connections.\r\n     * Default: false.\r\n     */\r\n    readonly fileMustExist?: boolean;\r\n\r\n    /**\r\n     * The number of milliseconds to wait when executing queries\r\n     * on a locked database, before throwing a SQLITE_BUSY error.\r\n     * Default: 5000.\r\n     */\r\n    readonly timeout?: number;\r\n\r\n    /**\r\n     * Provide a function that gets called with every SQL string executed by the database connection.\r\n     */\r\n    readonly verbose?: Function;\r\n}"],"sourceRoot":"../.."}